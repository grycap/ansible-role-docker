- name: Install dependencies in Deb systems
  apt: 
    name: 
      - python-setuptools
      - python-pip
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg2
    update_cache: yes
    cache_valid_time: 3600
    state: present

- name: Install dependencies in Deb systems
  apt: name=gnupg2
  when: ansible_distribution != "Ubuntu"

- name: Install dependencies in Deb systems
  apt: name=gnupg-agent
  when: ansible_distribution == "Ubuntu"

# This is for old 14.04 versions, comment as version_compare has changed the name to version
# in ansible 2.5 and in 2.9 has been removed

#- name: Get Kernel release
#  command: uname -r
#  register: KERNEL_RELEASE
#  changed_when: false

#- name: Apt upgrade the kernel and install additional packages
#  apt: name=linux-image-generic-lts-trusty update_cache=yes cache_valid_time=3600
#  when: KERNEL_RELEASE.stdout | version_compare('3.13.0', '<=')

#- name: restart the machine if kernel was upgraded
#  command: shutdown -r now "Ansible updates triggered"
#  async: 0
#  poll: 0
#  ignore_errors: true
#  when: KERNEL_RELEASE.stdout | version_compare('3.13.0', '<=')

#- name: waiting for machine to come back
#  local_action: wait_for host={{IM_NODE_NET_0_IP}} state=started
#  become: false
#  when: KERNEL_RELEASE.stdout | version_compare('3.13.0', '<=')

- name: Add Docker repo key
  apt_key: url="https://download.docker.com/linux/debian/gpg"
  ignore_errors: yes
  register: add_docker_repo

- name: Add Docker repo key (python 2.7.9 or older)
  shell: curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -qq - >/dev/null
  when: add_docker_repo is failed

- name: Add docker-ce  repo
  apt_repository: repo='deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} {{ docker_channel }}'
  when: ansible_distribution == "Ubuntu"

- name: Add docker repo
  apt_repository: repo='deb https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable' state=present update_cache=yes
  when: ansible_distribution != "Ubuntu"

- name: Install docker latest
  apt: name=docker-ce update_cache=yes
  when: docker_version == "latest"

- name: Install docker {{ docker_version }}
  apt: name="docker-ce={{ docker_version }}" state=present force=yes
  when: docker_version != "latest"

- name: Install CRIU
  apt: name=criu state=present
  when: docker_install_criu and ansible_distribution_major_version == "16"
